using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Mvc5RQ.Models;
using System.Web.UI;

namespace Mvc5RQ.Controllers
{
    /// <summary>
    /// Controller Class for URLs designating RiQuest Knowledge Organisation System (KOS) objects
    /// </summary>
    /// <remarks>
    /// The controller supports URLs of type 
    /// {serviceId}RQKos/{RQKosItemId}
    /// </remarks>
    public class RQKosController : BaseController
    {

        #region private methods

        /// <summary>
        /// Returns the RQKosModel pertainig to a given RQKosItemId. 
        /// </summary>
        /// <param name="itemID">
        /// A valid RQKosItemID.  
        /// </param>
        /// <returns>
        /// The RQKosModel contains a RQKosBranch, i. e. a collection of descriptions of subclassifications (minor class) to the classification (major class) with ID = RQKosItemId. 
        /// </returns>
        private RQKosModel GetModel(string itemID)
        {
            return GetModel(itemID, "");
        }

        /// <summary>
        /// Returns a collection of RQKosItems pertainig to a given RQKosItemId.
        /// </summary>
        /// <param name="itemID">
        /// A valid RQKosItemID.
        /// </param>
        /// <param name="serviceId">
        /// Id of the desired service API:
        /// serviceId == "dt": DynaTree API.
        /// </param>
        /// <returns>
        /// The RQKosModel contains a RQKosBranch, i. e. a collection of descriptions of subclassifications (minor class) to the classification (major class) with ID = RQKosItemId. 
        /// The description of the major class is not containes if the serviceId = "dt".
        /// </returns>
        private RQKosModel GetModel(string itemID, string serviceId)
        {
            return new RQKosModel(itemID, serviceId);
        }

        #endregion

        #region public methods

        /// <summary>
        /// Controller action answering GET http-requests to a single RiQuest Knowledge Organisation System Branch (RQKosBranch).
        /// </summary>
        /// <remarks>
        /// The action reacts to URLs of type "~/RQKos/id" and returns the RQKosBranch with ID=id.
        /// The action response is filtered by the ActionFilterAttributes "EnableJson" and "EnableXml":
        /// If the GET request contains dataType=application/json | text/json or dataType=application/xml | text/xml the action response is generated by class "JsonResult2" or "XmlResult" of "MvpRestApiLib".
        /// In both cases the client is responsible to render the xml (f. e. by XSLT).
        /// Otherwise the action response is returned according to the value of parameter "verb". 
        /// </remarks>
        /// <param name="verb">
        /// null | new | dt
        /// </param>
        /// <param name="id">
        /// rqc_[Code] = RQClassification Class with ClassCode=Code 
        /// 0 = Root Classes of the RQClassification
        /// </param>
        /// <returns>
        /// verb == null: The action returns the RQKosBranch with ID=id to be rendered by RQKos/Index view.
        /// verb == dt: The action returns the RQKosBranch with ID=id according to the DynaTree format. 
        /// verb == edit: The action returns the RQKosBranch with ID=id to be rendered by RQKos/ClientRQKosEditor view
        /// verb == check: The action returns a message about the consistency state of RQKosBranch with ID=id as json string.
        /// verb == new: The action returns an (empty) data entry mask to add a new RQKosBranch (not yet implemented).
        /// </returns>
        [HttpGet, OutputCache(NoStore = true, Location = OutputCacheLocation.None)]
        public ActionResult RQKosBranch(string id, string verb)
        {
            RQKosModel model = GetModel(!string.IsNullOrEmpty(id) ? id : RQKosModel.GetActiveModelID());
            
            if (Mvc5RQ.Helpers.AccessRightsResolver.HasAddAccess()) ViewBag.AccessRights = "EDITOR";
            ViewBag.locPath = HttpContext.Request.QueryString.Get("p");
            ViewBag.docNo = HttpContext.Request.QueryString.Get("d");
            if (string.IsNullOrEmpty(ViewBag.locPath) && string.IsNullOrEmpty(ViewBag.docNo))
                if (HttpContext.Request.Cookies.Get("dynatree-active") != null)
                {
                    string cc = HttpUtility.UrlDecode(HttpContext.Request.Cookies.Get("dynatree-active").Value);
                    if (!string.IsNullOrEmpty(cc))
                        model = GetModel(cc.Substring(0, cc.IndexOf('$')));
                }
            if (string.IsNullOrEmpty(ViewBag.docNo)) ViewBag.docNo = RQKosModel.GetActiveDocumentID();
            if (string.IsNullOrEmpty(ViewBag.locPath))
                ViewBag.locPath = new RQLib.RQKos.Classifications.SubjClass(model.RQKosSet.GetItem(0)._class.ClassID, model.RQKosSet.GetItem(0)._class.ClassDataClient).ClassPath;
            ViewBag.HasAddPermit = Mvc5RQ.Helpers.AccessRightsResolver.HasAddAccess(); // Enable the add new button if user is allowed to add RQItems to the database.
            ViewBag.GetRQItemVerb = "BrowseItem"; // Tell GetRQItem() in ResultViewer the appropiate verb for saving the user state.
            return View("Index", model.RQKosSet);
        }

        [HttpGet, OutputCache(NoStore = true, Location = OutputCacheLocation.None)]
        public ActionResult RQKosLD(string id)
        {
            RQKosModel model = GetModel(id, "rqld");

            if ((ViewBag.locPath == null) || (ViewBag.locPath == ""))
            {
                ViewBag.locPath = new RQLib.RQKos.Classifications.SubjClass(model.RQKosSet.GetItem(0)._class.ClassID, model.RQKosSet.GetItem(0)._class.ClassDataClient).ClassPath;
            }
            return View("ServRQKos", model.RQKosSet);
            //return View("ServRQKos");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet, OutputCache(NoStore = true, Location = OutputCacheLocation.None)]
        public ActionResult Edit(string id)
        {
            if (Mvc5RQ.Helpers.AccessRightsResolver.HasAddAccess())
            {
                ViewBag.RQKosId = id;
                return View("ClientRQKosEditor", new RQKosEditModel(id).RQKosEditSet);
            }
            else
                throw new AccessViolationException(RQResources.Views.Shared.SharedStrings.err_not_authorized);
        }

        #endregion
    }
}
