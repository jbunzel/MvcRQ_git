using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using MvcRQ.Models;
using MvpRestApiLib;
using System.Web.UI;

namespace MvcRQ.Controllers
{

    /// <summary>
    /// Controller Class for URLs designating RiQuest Knowledge Organisation System (KOS) objects
    /// </summary>
    /// <remarks>
    /// The controller supports URLs of type 
    /// {serviceId}RQKos/{RQKosItemId}
    /// </remarks>
    public class RQKosController : BaseController
    {

        #region "private methods"

        /// <summary>
        /// Returns the RQKosModel pertainig to a given RQKosItemId. 
        /// </summary>
        /// <param name="itemID">
        /// A valid RQKosItemID.  
        /// </param>
        /// <returns>
        /// The RQKosModel contains a RQKosBranch, i. e. a collection of descriptions of subclassifications (minor class) to the classification (major class) with ID = RQKosItemId. 
        /// </returns>
        private RQKosModel GetModel(string itemID)
        {
            return GetModel(itemID, "");
        }


        /// <summary>
        /// Returns a collection of RQKosItems pertainig to a given RQKosItemId.
        /// </summary>
        /// <param name="itemID">
        /// A valid RQKosItemID.
        /// </param>
        /// <param name="serviceId">
        /// Id of the desired service API:
        /// serviceId == "dt": DynaTree API.
        /// </param>
        /// <returns>
        /// The RQKosModel contains a RQKosBranch, i. e. a collection of descriptions of subclassifications (minor class) to the classification (major class) with ID = RQKosItemId. 
        /// The description of the major class is not containes if the serviceId = "dt".
        /// </returns>
        private RQKosModel GetModel(string itemID, string serviceId)
        {
            return new RQKosModel(itemID, serviceId);
        }

        #endregion

        #region "protected methods"

        /// <summary>
        /// 
        /// </summary>
        /// <param name="filterContext"></param>
        //protected override void OnException(ExceptionContext filterContext)
        //{
        //    if (filterContext.HttpContext.IsCustomErrorEnabled || true)  //IsCustomErrorEnabled always false if client is localhost or client and server IPs identical. True set to override.
        //    {
        //        filterContext.ExceptionHandled = true;
        //        // If this is an ajax request, return the exception in the response            
        //        if (filterContext.HttpContext.Request.IsAjaxRequest())
        //        {
        //            filterContext.HttpContext.Response.StatusCode = 500;
        //            var json = new JsonResult();
        //            json.Data = filterContext.Exception.Message + filterContext.Exception.StackTrace;
        //            json.ExecuteResult(this.ControllerContext);
        //        }
        //        else
        //        {
        //            ViewData.Model = new System.Web.Mvc.HandleErrorInfo(filterContext.Exception, "ControllerName", "ActionName");
        //            // Pass a flag to the view to tell it whether or not to show a the stack trace                
        //            ViewBag.IsCustomErrorEnabled = true; //filterContext.HttpContext.IsCustomErrorEnabled;
        //            this.View("Error").ExecuteResult(this.ControllerContext);
        //        }
        //    }
        //}

        #endregion

        #region "public methods"

        /// <summary>
        /// Controller action answering GET http-requests to a single RiQuest Knowledge Organisation System Branch (RQKosBranch).
        /// </summary>
        /// <remarks>
        /// The action reacts to URLs of type "~/RQKos/id" and returns the RQKosBranch with ID=id.
        /// The action response is filtered by the ActionFilterAttributes "EnableJson" and "EnableXml":
        /// If the GET request contains dataType=application/json | text/json or dataType=application/xml | text/xml the action response is generated by class "JsonResult2" or "XmlResult" of "MvpRestApiLib".
        /// In both cases the client is responsible to render the xml (f. e. by XSLT).
        /// Otherwise the action response is returned according to the value of parameter "verb". 
        /// </remarks>
        /// <param name="verb">
        /// null | new | dt
        /// </param>
        /// <param name="id">
        /// rqc_[Code] = RQClassification Class with ClassCode=Code 
        /// 0 = Root Classes of the RQClassification
        /// </param>
        /// <returns>
        /// verb == null: The action returns the RQKosBranch with ID=id to be rendered by RQKos/Index view.
        /// verb == dt: The action returns the RQKosBranch with ID=id according to the DynaTree format. 
        /// verb == edit: The action returns the RQKosBranch with ID=id to be rendered by RQKos/ClientRQKosEditor view
        /// verb == check: The action returns a message about the consistency state of RQKosBranch with ID=id as json string.
        /// verb == new: The action returns an (empty) data entry mask to add a new RQKosBranch (not yet implemented).
        /// </returns>
        [EnableJson, EnableXml]
        [HttpGet, OutputCache(NoStore = true, Location = OutputCacheLocation.None)]
        public ActionResult RQKosBranch(string id, string verb)
        {
            if ((!string.IsNullOrEmpty(verb)) && ((verb.ToLower() == "edit")))
            {
                ViewBag.RQKosId = id;
                return View("ClientRQKosEditor", new RQKosEditModel(id).RQKosEditSet);
            }
            else if ((!string.IsNullOrEmpty(verb)) && ((verb.ToLower() == "dt")))
                return View("Index", GetModel(id, verb).RQKosSet);
            else
            {
                RQKosModel model = GetModel(id);

                ViewBag.locPath = HttpContext.Request.QueryString.Get("p");
                ViewBag.docNo = HttpContext.Request.QueryString.Get("d");
                if (string.IsNullOrEmpty(ViewBag.locPath) && string.IsNullOrEmpty(ViewBag.docNo))
                    if (HttpContext.Request.Cookies.Get("dynatree-active") != null)
                    {
                        string cc = HttpUtility.UrlDecode(HttpContext.Request.Cookies.Get("dynatree-active").Value);
                        if (! string.IsNullOrEmpty(cc))
                            model = GetModel(cc.Substring(0, cc.IndexOf('$')));
                    }
                if (string.IsNullOrEmpty(ViewBag.locPath))
                    ViewBag.locPath = new RQLib.RQKos.Classifications.SubjClass(model.RQKosSet.GetItem(0)._class.ClassID, model.RQKosSet.GetItem(0)._class.ClassDataClient).ClassPath;
                ViewBag.HasAddPermit = MvcRQ.Helpers.AccessRightsResolver.HasAddAccess(); // Enable the add new button if user is allowed to add RQItems to the database.
                ViewBag.GetRQItemVerb = "BrowseItem"; // Tell GetRQItem() in ResultViewer the appropiate verb for saving the user state.
                return View("Index", model.RQKosSet);
            }
        }

        /// <summary>
        /// Controller action answering GET http-requests to an API servicing a single RiQuest Knowledge Organisation System Branch (RQKosBranch).
        /// </summary>
        /// <remarks>
        /// The action reacts to URLs of type "~/{serviceId}/RQKos/rqitemID".
        /// The action request is filtered through the ActionFilterAttributes EnableJson and EnableXml:
        /// If the client GET request contains dataType=application/json | text/json or dataType=application/xml | text/xml the action response is generated by class JsonResult2 or XmlResult of MvpRestApiLib.
        /// In both cases the client is responsible to render the xml (f. e. by XSLT).
        /// Otherwise the action response is tranformed on the server according to the serviceId specified. 
        /// </remarks>
        /// <param name="id">
        /// A valid ID of a RiQuest Knowledge Organisation System (KOS) Item.
        /// </param>
        /// <param name="serviceId">
        /// Id of the desired service API:
        /// serviceId == "rq": internal RiQuest API (default);
        /// serviceId == "rqld": Riquest Linked Data API.
        /// </param>
        /// <param name="verb">
        /// verb == "dt": Controller returns JQuery.DynaTree nodelist format
        /// </param>
        /// <returns>
        /// The action returns a description of the RQKosItem with ID=id as */json, */xml response or text/html response - the latter formatted according to yet undefined - depending on data types specified in the GET request.
        /// If serviceId=dt the return format is always */json according as required by the JQuery.DynaTree plugin.
        /// </returns>
        [EnableJson, EnableXml]
        [HttpGet, OutputCache(NoStore = true, Location = OutputCacheLocation.None)]
        public ActionResult ServiceRQKosBranch(string serviceId, string id, string verb)
        {
            if (verb == "dt")
                return View(GetModel(id, verb).RQKosSet);
            else
            {
                RQKosModel model = GetModel(id, serviceId);

                if ((ViewBag.locPath == null) || (ViewBag.locPath == ""))
                {
                    ViewBag.locPath = new RQLib.RQKos.Classifications.SubjClass(model.RQKosSet.GetItem(0)._class.ClassID, model.RQKosSet.GetItem(0)._class.ClassDataClient).ClassPath;
                }
                if (serviceId != null)
                {
                    switch (serviceId)
                    {
                        case "rqld":
                            EnableXmlAttribute.XSLTransform = "~/xslt/rqkos2rdf.xslt";
                            break;
                        case "rq":
                            EnableXmlAttribute.XSLTransform = "";
                            break;
                        default:
                            throw new NotImplementedException("RiQuest data service not yet implemented for unknown format.");
                    }
                }
                else
                    EnableXmlAttribute.XSLTransform = "";
                return View("ServRQKos", model.RQKosSet);
            }
        }

        /// <summary>
        /// Controller action answering POST http-requests transfering a single RiQuest Knowledge Organisation System (KOS) Item.
        /// TODO: Aktuell in Berarbeitung: Fehlerhaft Anzeige nach delete. 
        /// </summary>
        /// <param name="verb"></param>
        /// <param name="id"></param>
        /// <param name="RQKosTransferBranch"></param>
        /// <returns></returns>
        [EnableJson, EnableXml]
        [HttpPost, OutputCache(NoStore = true, Location = OutputCacheLocation.None)]
        [ValidateInput(false)]
        [ActionName("RQKosBranch")]
        public ActionResult UpdateRQKosBranch(string id, string verb, IEnumerable<RQKosTransfer> RQKosTransferBranch)
        {
            RQKosEditModel editModel = new RQKosEditModel(RQKosTransferBranch);

            if ((!string.IsNullOrEmpty(verb)) && ((verb.ToLower() == "check")))
                return View(editModel.IsValid());
            else if ((!string.IsNullOrEmpty(verb)) && ((verb.ToLower() == "new")))
                return View("ClientRQKosEditor", editModel.AppendClass());
            else if ((!string.IsNullOrEmpty(verb)) && ((verb.ToLower() == "update")))
                if (editModel.Update())
                    return View("ClientRQKosEditor", editModel.RQKosEditSet);
                else
                    return View("ClientRQKosEditor", editModel.RQKosEditStatus);
            else if ((!string.IsNullOrEmpty(verb)) && ((verb.ToLower() == "delete")))
                if (editModel.Delete())
                    return View("ClientRQKosEditor", editModel.RQKosEditSet);
                else
                    return View("ClientRQKosEditor", editModel.RQKosEditStatus);
            else
                return View();
        }

        #endregion
    }
}
