using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using MvcRQ.Models;
using MvpRestApiLib;
using System.Web.UI;

namespace MvcRQ.Controllers
{

    /// <summary>
    /// Controller Class for URLs designating RiQuest Knowledge Organisation System (KOS) objects
    /// </summary>
    /// <remarks>
    /// The controller supports URLs of type 
    /// {formatID}RQKos/{RQKosItemId}
    /// </remarks>
    public class RQKosController : Controller
    {

        /// <summary>
        /// Returns the RQKosModel pertainig to a given RQKosItemId. 
        /// </summary>
        /// <param name="itemID">
        /// A valid RQKosItemID.  
        /// </param>
        /// <returns>
        /// The RQKosModel contains a RQKosBranch, i. e. a collection of descriptions of subclassifications (minor class) to the classification (major class) with ID = RQKosItemId. 
        /// </returns>
        private RQKosModel GetModel(string itemID)
        {
            return GetModel(itemID, "");
        }
        

        /// <summary>
        /// Returns a collection of RQKosItems pertainig to a given RQKosItemId.
        /// </summary>
        /// <param name="itemID">
        /// A valid RQKosItemID.
        /// </param>
        /// <param name="formatID">
        /// An empty string or "dt" if model is to generate input for DynaTree.
        /// </param>
        /// <returns>
        /// The RQKosModel contains a RQKosBranch, i. e. a collection of descriptions of subclassifications (minor class) to the classification (major class) with ID = RQKosItemId. 
        /// The description of the major class is not containes if the formatID = "dt".
        /// </returns>
        private RQKosModel GetModel(string itemID, string formatID)
        {
            return new RQKosModel(itemID, formatID);
        }


        /// <summary>
        /// Controller action answering GET http-requests to RQKosItems
        /// </summary>
        /// <remarks>
        /// The action reacts to URLs of type "~/RQKos".
        /// The action response is filtered by the ActionFilterAttributes "EnableJson" and "EnableXml":
        /// If the GET request contains dataType=application/json | text/json or dataType=application/xml | text/xml the action response is generated by class "JsonResult2" or "XmlResult" of "MvpRestApiLib".
        /// In both cases the client is responsible to render the xml (f. e. by XSLT).
        /// Otherwise the action response is transformed to text/html on the server according to the value of parameter "verb". 
        /// </remarks>
        /// <param name="verb">
        /// null | new | rqListHTML.
        /// </param>
        /// <returns>
        /// verb == null: The action returns the (empty) RQItems/Index view.
        /// verb == new: The action returns an (empty) data entry mask to add a new RQItem (not yet implemented).
        /// verb == rqListHTML: The action returns a collection of RQItems as */json, */xml or text/html - the latter generated by the XSLT "RQResultList2RQSorted.xslt" - depending on data types specified in the GET request.
        /// The returned collection is the result set pertaining either to the last query stored in the state storage or - if no query is stored - to the "recent additions" query. 
        /// </returns>
        [EnableJson, EnableXml]
        [HttpGet, OutputCache(NoStore = true, Location = OutputCacheLocation.None)]
        public ActionResult Index( string id, string verb)
        {
            ViewBag.locPath = HttpContext.Request.QueryString.Get("p");
            if ((ViewBag.locPath == null) || (ViewBag.locPath == ""))
                ViewBag.locPath = "/1$A/16$AA/293$AA1";
            ViewBag.docNo = HttpContext.Request.QueryString.Get("d");
            if ((ViewBag.docNo == null) || (ViewBag.docNo == ""))
                ViewBag.docNo = "";
            if (verb == "New")
                return View("NewRQKosItem", new RQKosItem());
            else
                return View(GetModel(id).RQKosSet);
        }
        

        /// <summary>
        /// Controller action answering GET http-requests to a single RiQuest Knowledge Organisation System (KOS) Item.
        /// </summary>
        /// <remarks>
        /// The action reacts to URLs of type "~/{formatID}/RQKos/rqitemID".
        /// The action request is filtered through the ActionFilterAttributes EnableJson and EnableXml:
        /// If the client GET request contains dataType=application/json | text/json or dataType=application/xml | text/xml the action response is generated by class JsonResult2 or XmlResult of MvpRestApiLib.
        /// In both cases the client is responsible to render the xml (f. e. by XSLT).
        /// Otherwise the action response is tranformed on the server according to the formatID specified. 
        /// </remarks>
        /// <param name="id">
        /// A valid ID of a RiQuest Knowledge Organisation System (KOS) Item.
        /// </param>
        /// <param name="formatId">
        /// Id of desired xml format:
        /// "rq" = RQIntern format (default);
        /// "dt" = JQuery.DynaTree nodelist format 
        /// </param>
        /// <returns>
        /// The action returns a description of the RQKosItem with ID=id as */json, */xml response or text/html response - the latter formatted according to yet undefined - depending on data types specified in the GET request.
        /// If formatId=dt the return format is always */json according as required by the JQuery.DynaTree plugin.
        /// </returns>
        [EnableJson, EnableXml]
        [HttpGet, OutputCache(NoStore = true, Location = OutputCacheLocation.None)]
        public ActionResult RQKosItemRecord(string id, string formatId)
        {
            //RQKosItem rqitem = GetModel().RQKosSet.FirstOrDefault(p => p.DocNo == rqitemID);
            //if (rqitem == null) rqitem = GetModel("$access$" + rqitemId).RQItems.FirstOrDefault(p => p.DocNo == rqitemId); // rqitem not available by query saved in state storage  
            //if (formatId != null)
            //{
            //    System.Xml.XmlTextReader r = rqitem.ConvertTo(formatId);

            //    r.MoveToContent();
            //    return this.Content(r.ReadOuterXml(), "text/xml", System.Text.Encoding.UTF8);
            //}
            //else
            //    return View("SingleRQItem", rqitem);
            return View("Index",GetModel(id, formatId).RQKosSet);
        }
    
    }

}
